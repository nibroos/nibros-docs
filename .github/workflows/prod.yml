name: CI/CD Pipeline

on:
  push:
    branches:
      - prod

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      GIT_REPO: 'git@github.com:nibroos/nibros-docs.git'
      GIT_BRANCH: 'main'
      TEMP_BUILD_DIR: 'tempbuild-${{ github.run_id }}'

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install Bun
      run: |
        curl -fsSL https://bun.sh/install | bash
        echo "$HOME/.bun/bin" >> $GITHUB_PATH

    - name: Install packages
      run: |
        mkdir -p ${{ env.TEMP_BUILD_DIR }}
        cd ${{ env.TEMP_BUILD_DIR }}
        bun install
        bun preprocess.js

    - name: Generate Preprocess Environment
      run: |
        cd ${{ env.TEMP_BUILD_DIR }}
    
    - name: Generate static files
      run: |
        cd ${{ env.TEMP_BUILD_DIR }}
        bun run docs:build || (echo "Build failed" && exit 1)
        ls -la docs/.vitepress

    - name: Archive generated files
      run: |
        cd ${{ env.TEMP_BUILD_DIR }}
        tar -czf build.tar.gz -C docs/.vitepress/dist .

    - name: Setup SSH for VPS
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/nibros_do_server
        chmod 600 ~/.ssh/nibros_do_server
        ssh-keyscan -H "${{ secrets.VPS_HOST }}" >> ~/.ssh/known_hosts

    - name: Copy files to VPS
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: ${{ env.TEMP_BUILD_DIR }}/build.tar.gz
        target: ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ secrets.VPS_DEPLOY_DIR }}

    - name: Extract files on VPS
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd ${{ secrets.VPS_DEPLOY_DIR }}
          tar -xzf build.tar.gz
          rm build.tar.gz

    - name: Clean up build directory
      run: |
        rm -rf ${{ env.TEMP_BUILD_DIR }}